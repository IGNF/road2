openapi: "3.0.0"
info:
  description: "Description de l'API du service d'itinéraire."
  version: "0.0.1"
  title: "Service d'itinéraire"
  contact:
    email: "idev@ign.fr"
servers:
  - url: "https://localhost"
    description: "Serveur de test local"
tags:
- name: "Découverte"
  description: "Découvrir le service et les ressources disponibles"
- name: "Utilisation"
  description: "Utiliser le service d'itinéraire"
- name: "Administration"
  description: "Administrer le service d'itinéraire"
paths:
  /getcapabilities:
    get:
      tags:
      - "Découverte"
      summary: "Découvrir le service"
      description: "Découvrir le service: les opérations possibles, les ressources disponibles et les options proposées."
      operationId: "getcapabilities"
      responses:
        200:
          description: "successful operation"
        404:
          description: "Not found"
  /route:
    get:
      tags:
      - "Utilisation"
      summary: "Calculer un itinéraire"
      description: "Calculer un itinéraire en fournissant un point de départ et un point d'arrivé. Plusieurs options peuvent être fournies."
      operationId: "routeItineraire-get"
      parameters:
      - name: "resource"
        in: "query"
        description: "Ressource utilisée pour le calcul. Les valeurs disponibles sont présentes dans le GetCapabilities. Une ressource est un graphe de navigation qui peut potentiellement avoir plusieurs modes de transports et de calculs. La ressource va plutôt parler du graphe, de la topologie de la donnée. Par exemple, il pourra s'agir d'un graphe de navigation issu de la BDTOPO v3 permettant de trouver l'itinéraire le plus court pour une voiture. "
        required: true
        schema:
          type: "string"
        example: "bdtopo-v3"
      - name: "start"
        in: "query"
        description: "Point de départ. Il devra être exprimé dans le CRS, par défaut, de la ressource (voir le paramètre 'crs' dans le GetCapabilities)."
        required: true
        schema:
          $ref: "#/components/schemas/point"
        example: "48.849319,2.337306"
      - name: "end"
        in: "query"
        description: "Point d'arrivée. Il devra être exprimé dans le CRS, par défaut, de la ressource (voir le paramètre 'crs' dans le GetCapabilities)."
        required: true
        schema:
          $ref: "#/components/schemas/point"
        example: "48.852891,2.367776"
      - name: "intermediates"
        in: "query"
        description: "Points intermédiaires. Ils devront être exprimés dans le CRS, par défaut, de la ressource (voir le paramètre 'crs' dans le GetCapabilities). S'il y a plusieurs points, ils devront être séparé par un pipe et l'ordre considéré sera celui donné."
        required: false
        schema:
          $ref: "#/components/schemas/coordinates"
        explode: false
        style: "pipeDelimited"
        example: "48.852890,2.368776|48.842891,2.367976"
      - name: "profile"
        in: "query"
        description: "Mode de déplacement utilisé pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "car"
      - name: "optimization"
        in: "query"
        description: "Mode de calcul utilisé pour déterminer l'itinéraire. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "fastest"
      - name: "format"
        in: "query"
        description: "Format de la réponse. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          $ref: "#/components/schemas/response-type"
      - name: "algorithm"
        in: "query"
        description: "Algorithme utilisé pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities. L'algorithme est la méthode informatitque employée par le service pour calculer un itinéraire."
        required: false
        schema:
          type: "string"
      - name: "constraints"
        in: "query"
        description: "Contraintes utilisées pour le calcul. Il s'agit d'un objet JSON (voir la version POST de cette opération). Les paramètres disponibles sont présents dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "{'constraintType':'banned','key':'ways_type','operator':'=','value':'autoroute','threshold':{'key':'delta_time','operator':'<','value':'10'}}"
      - name: "getGeometry"
        in: "query"
        description: "Présence de la géométrie dans la réponse. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "boolean"
        example: true
      - name: "getBbox"
        in: "query"
        description: "Présence de l'emprise de l'itinéraire dans la réponse. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "boolean"
        example: true
      - name: "getInstructions"
        in: "query"
        description: "Présence des instructions de navigation dans la réponse. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "boolean"
        example: false
      - name: "distanceUnit"
        in: "query"
        description: "Unité des distances renvoyées. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "kilometer"
      - name: "timeUnit"
        in: "query"
        description: "Unité du temps renvoyé. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "hour"
      - name: "crs"
        in: "query"
        description: "Projection des géometries. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "EPSG:4326"
      - name: "waysAttributes"
        in: "query"
        description: "Attributs des tronçons à afficher dans la réponse. Les valeurs disponibles et les valeurs par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itineraire"
            application/xml:
              schema:
                $ref: "#/components/schemas/itineraire"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
    post:
      tags:
      - "Utilisation"
      summary: "Calculer un itinéraire"
      description: "Calculer un itinéraire en fournissant un point de départ et un point d'arrivé. Plusieurs options peuvent être fournies."
      operationId: "routeItineraire-post"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/routeBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/routeBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/itineraire"
            application/xml:
              schema:
                $ref: "#/components/schemas/itineraire"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /nearest:
    get:
      tags:
      - "Utilisation"
      summary: "Trouver le point ou l'arc le plus proche"
      description: "Trouver le ou les points les plus proche d'une position ponctuelle. On peut également trouver des arcs ou les deux."
      operationId: "nearestItineraire"
      parameters:
      - name: "point"
        in: "query"
        description: "Coordonnées d'une position ponctuelle."
        required: true
        schema:
          $ref: "#/components/schemas/point"
        example: "48.849319,2.337306"
      - name: "resource"
        in: "query"
        description: "Ressource utilisée pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: true
        schema:
          type: "string"
        example: "bduni"
      - name: "format"
        in: "query"
        description: "Format de la réponse. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          $ref: "#/components/schemas/response-type"
        example: "application/json"
      - name: "number"
        in: "query"
        description: "Nombre de points voulus en sortie. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "number"
          format: "integer"
        example: 10
      - name: "getId"
        in: "query"
        description: "Préciser si on souhaite avoir l'id des éléments retournés. La valeur par défaut utilisée est présente dans le GetCapabilities."
        required: false
        schema:
          type: "boolean"
        example: false
      - name: "resultType"
        in: "query"
        description: "Préciser le type des données que l'on veut: noeuds et/ou arcs. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
          enum: ["all","node","arc"]
        example: "all"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/near"
            application/xml:
              schema:
                $ref: "#/components/schemas/near"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
    post:
      tags:
      - "Utilisation"
      summary: "Trouver le point ou l'arc le plus proche"
      description: "Trouver le ou les points les plus proche d'une position ponctuelle. On peut également trouver des arcs ou les deux."
      operationId: "nearestItineraire-post"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/nearestBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/nearestBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/near"
            application/xml:
              schema:
                $ref: "#/components/schemas/near"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /isochrone:
    get:
      tags:
      - "Utilisation"
      summary: "Calculer une isochrone ou une isodistance"
      description: "Obtenir une surface géo-localisée représentant l’ensemble des points atteignables à partir d’un point de départ. Les points de départ et d’arrivée peuvent être inversés: on obtient alors la liste des points de départs possibles permettant d’atteindre un point d’arrivée donné. On peut aussi fournir un critère de distance plutôt que de temps: on parle alors de calcul d’iso-distances."
      operationId: "isochrone"
      parameters:
      - name: "point"
        in: "query"
        description: "Coordonnées d'une position ponctuelle. C'est le point à partir duquel seront fait les calculs."
        required: true
        schema:
          $ref: "#/components/schemas/point"
        example: "48.849319,2.337306"
      - name: "resource"
        in: "query"
        description: "Ressource utilisée pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: true
        schema:
          type: "string"
        example: "bduni"
      - name: "costType"
        in: "query"
        description: "Coût utilisé pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: true
        schema:
          type: "string"
          enum: ["temps","distance"]
        example: "temps"
      - name: "costValue"
        in: "query"
        description: "Valeur du coût utilisé pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities. On pourra, par exemple, préciser une distance ou un temps, selon le costType choisi. L'unité dépendra du type et des paramètres distanceUnit et timeUnit."
        required: true
        schema:
          type: "number"
          format: "float"
        example: "1.0"
      - name: "profile"
        in: "query"
        description: "Mode de déplacement utilisé pour le calcul. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "car"
      - name: "direction"
        in: "query"
        description: "Sens du parcours. Cela permet de définir le sens du parcours. Soit on définit un point de départ et on obtient les points d'arrivé potentiels. Soit on définit un point d'arrivé et on otient les points de départ potentiels. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
          enum: ["departure","arrival"]
        example: "départ"
      - name: "constraints"
        in: "query"
        description: "Contraintes utilisées pour le calcul. Il s'agit d'un objet JSON (voir la version POST de cette opération). Les paramètres disponibles sont présents dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "{'constraintType':'banned','key':'ways_type','operator':'=','value':'autoroute'}"
      - name: "format"
        in: "query"
        description: "Format de la réponse. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          $ref: "#/components/schemas/response-type"
        example: "application/json"
      - name: "distanceUnit"
        in: "query"
        description: "Unité des distances renvoyées. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "kilometer"
      - name: "timeUnit"
        in: "query"
        description: "Unité du temps renvoyé. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "hour"
      - name: "crs"
        in: "query"
        description: "Projection des géometries. Les valeurs disponibles et la valeur par défaut utilisées sont présentes dans le GetCapabilities."
        required: false
        schema:
          type: "string"
        example: "EPSG:4326"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/isochrone"
            application/xml:
              schema:
                $ref: "#/components/schemas/isochrone"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
    post:
      tags:
      - "Utilisation"
      summary: "Calculer une isochrone ou une isodistance"
      description: "Obtenir une surface géo-localisée représentant l’ensemble des points atteignables à partir d’un point de départ. Les points de départ et d’arrivée peuvent être inversés: on obtient alors la liste des points de départs possibles permettant d’atteindre un point d’arrivée donné. On peut aussi fournir un critère de distance plutôt que de temps: on parle alors de calcul d’iso-distances."
      operationId: "isochrone-post"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/isochroneBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/isochroneBody"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/isochrone"
            application/xml:
              schema:
                $ref: "#/components/schemas/isochrone"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /administration/server:
    get:
      tags:
      - "Administration"
      summary: "Obtenir la configuration du server."
      description: "Cette requête retourne la configuration du server. "
      operationId: "server"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  configFile:
                    type: "string"
                  configuration:
                    type: "object"
            application/xml:
              schema:
                type: "object"
                properties:
                  configFile:
                    type: "string"
                  configuration:
                    type: "object"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
  /administration/resource:
    get:
      tags:
      - "Administration"
      summary: "Obtenir la configuration d'une ressource."
      description: "Cette requête retourne la configuration d'une ressource."
      operationId: "get-resource"
      parameters:
      - name: "id"
        in: "query"
        description: "Tableau des ids de ressources à décrire. Chaque id peut être complet ou incomplet. S'il est complet, seule cette ressource sera décrite. Si aucune ressource ne correspond, alors toutes les ressources pouvant correspondre vont être décrite. Équivalent du LIKE en SQL."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        explode: false
        style: "pipeDelimited"
        example: "bduni"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    resourceId:
                      type: "string"
                    configFile:
                      type: "string"
                    configuration:
                      type: "object"
            application/xml:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    resourceId:
                      type: "string"
                    configFile:
                      type: "string"
                    configuration:
                      type: "object"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
    post:
      tags:
      - "Administration"
      summary: "Modifier une ressource existante. Il faut fournir la configuration de la ressource à modifier."
      description: ""
      operationId: "post-resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createResource"
          application/xml:
            schema:
              $ref: "#/components/schemas/createResource"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  configFile:
                    type: "string"
                  configuration:
                    type: "object"
            application/xml:
              schema:
                type: "object"
                properties:
                  configFile:
                    type: "string"
                  configuration:
                    type: "object"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
    put:
      tags:
      - "Administration"
      summary: "Intégrer une nouvelle ressource. Il faut fournir la configuration de la ressource à intégrer."
      description: ""
      operationId: "put-resource"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createResource"
          application/xml:
            schema:
              $ref: "#/components/schemas/createResource"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  configFile:
                    type: "string"
                  configuration:
                    type: "object"
            application/xml:
              schema:
                type: "object"
                properties:
                  configFile:
                    type: "string"
                  configuration:
                    type: "object"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
    delete:
      tags:
      - "Administration"
      summary: "Intégrer une nouvelle ressource. Il faut fournir l'id des ressources à supprimer."
      description: ""
      operationId: "delete-resource"
      parameters:
      - name: "id"
        in: "query"
        description: "Tableau des ids de ressources à supprimer. Les ids doivent être complets."
        required: true
        schema:
          type: "array"
          items:
            type: "string"
        explode: false
        style: "pipeDelimited"
        example: "bduni"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    resourceId:
                      type: "string"
            application/xml:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    resourceId:
                      type: "string"
        400:
          description: "Invalid parameters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        403:
          description: "Not allowed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/errorResponse"
components:
  schemas:
    point:
      type: "string"
      pattern: '^(\-?\d+(\.\d+)?),\s*(\-?\d+(\.\d+)?)$'
    coordinates:
      type: "array"
      items:
        $ref: "#/components/schemas/point"
    response-type:
      type: "string"
      enum: ["application/json","application/xml"]
    constraint:
      type: "object"
      properties:
        constraintType:
          type: "string"
          enum: ["banned","preferred","unpreferred"]
        key:
          type: "string"
        operator:
          type: "string"
        value:
          type: "string"
        threshold:
          type: "object"
          properties:
            key:
              type: "string"
            operator:
              type: "string"
            value:
              type: "string"
    constraintIso:
      type: "object"
      properties:
        constraintType:
          type: "string"
          enum: ["banned"]
        key:
          type: "string"
        operator:
          type: "string"
        value:
          type: "string"
    routeBody:
      type: "object"
      properties:
        resource:
          type: "string"
        start:
          $ref: "#/components/schemas/point"
        end:
          $ref: "#/components/schemas/point"
        intermediates:
          $ref: "#/components/schemas/coordinates"
        profile:
          type: "string"
        optmization:
          type: "string"
        format:
          $ref: "#/components/schemas/response-type"
        algorithm:
          type: "string"
        constraints:
          type: "array"
          items:
            $ref: "#/components/schemas/constraint"
        getGeometry:
          type: "boolean"
        getBbox:
          type: "boolean"
        getInstructions:
          type: "boolean"
        distanceUnit:
          type: "string"
        timeUnit:
          type: "string"
        crs:
          type: "string"
        waysAttributes:
          type: "array"
          items:
            type: "string"
    nearestBody:
      type: "object"
      properties:
        point:
          $ref: "#/components/schemas/point"
        resource:
          type: "string"
        format:
          $ref: "#/components/schemas/response-type"
        number:
          type: "number"
          format: "integer"
        getId:
          type: "boolean"
        resultType:
          type: "string"
          enum: ["all","node","arc"]
    isochroneBody:
      type: "object"
      properties:
        point:
          $ref: "#/components/schemas/point"
        resource:
          type: "string"
        costType:
          type: "string"
          enum: ["temps","distance"]
        costValue:
          type: "number"
          format: "float"
        profile:
          type: "string"
        direction:
          type: "string"
          enum: ["départ","arrivé"]
        constraints:
          type: "array"
          items:
            $ref: "#/components/schemas/constraintIso"
        format:
          $ref: "#/components/schemas/response-type"
        distanceUnit:
          type: "string"
        timeUnit:
          type: "string"
        crs:
          type: "string"
    createResource:
      type: "object"
      properties:
        resource:
          type: "object"
          properties:
            file:
              type: "string"
    errorResponse:
      type: "object"
      properties:
        error:
          type: "object"
          properties:
            errorType:
              type: "string"
            message:
              type: "string"
    itineraire:
      type: "object"
      properties:
        start:
          $ref: "#/components/schemas/point"
        end:
          $ref: "#/components/schemas/point"
        geometry:
          type: "string"
        algorithm:
          type: "string"
        duration:
          type: "number"
          format: "float"
        distance:
          type: "number"
          format: "float"
        bbox:
          type: "string"
        departure:
          type: "string"
          format: "date"
        arrival:
          type: "string"
          format: "date"
        resource:
          type: "string"
        profile:
          type: "string"
        optimization:
          type: "string"
        crs:
          type: "string"
        constraints:
          type: "array"
          items:
            $ref: "#/components/schemas/constraint"
        alerts:
          type: "array"
          items:
            type: "object"
            properties:
              message:
                type: "string"
        portions:
          type: "array"
          items:
            type: "object"
            properties:
              start:
                $ref: "#/components/schemas/point"
              end:
                $ref: "#/components/schemas/point"
              duration:
                type: "number"
                format: "float"
              distance:
                type: "number"
                format: "float"
              bbox:
                type: "string"
              departure:
                type: "string"
                format: "date"
              arrival:
                type: "string"
                format: "date"
              steps:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "string"
                    attributs:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          key:
                            type: "string"
                          value:
                            type: "string"
                    duration:
                      type: "number"
                      format: "float"
                    distance:
                      type: "number"
                      format: "float"
                    geometry:
                      type: "string"
                    instructions:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          message:
                            type: "string"
                    alerts:
                      type: "array"
                      items:
                        type: "object"
                        properties:
                          message:
                            type: "string"
    near:
      type: "object"
      properties:
        point:
          $ref: "#/components/schemas/point"
        resource:
          type: "string"
        numberAsked:
          type: "number"
          format: "integer"
        numberReturned:
          type: "number"
          format: "integer"
        results:
          type: "array"
          items:
            type: "object"
            properties:
              resultType:
                type: "string"
                enum: ["node","arc"]
              geometry:
                type: "string"
              attributs:
                type: "array"
                items:
                  type: "object"
                  properties:
                    key:
                      type: "string"
                    value:
                      type: "string"
    isochrone:
      type: "object"
      properties:
        point:
          $ref: "#/components/schemas/point"
        resource:
          type: "string"
        costType:
          type: "string"
        costValue:
          type: "number"
        profile:
          type: "string"
        direction:
          type: "string"
        constraints:
          $ref: "#/components/schemas/constraintIso"
        crs:
          type: "string"
        geometry:
          type: "string"
        departure:
          type: "string"
          format: "date"
        arrival:
          type: "string"
          format: "date"
        alerts:
          type: "array"
          items:
            type: "object"
            properties:
              message:
                type: "string"
