# Description d'un fichier de configuration de ressource PGR

# Une ressource est un objet qui contient toutes les informations utiles pour que l'application puisse diffuser ses services.
"resource":
	type: object
  required: true
	properties:
    # Id de la ressource. C'est l'id qui apparaîtra dans le getcap et sera utilisé pour les requêtes.
		"id":
			type: string
      required: true
    # Type de la ressource: osmr ou pgr. Selon le type, différentes informations seront alors attendues.
		"type":
			type: string
      required: true
			enum: ["pgr"]
    # Description de la ressource qui apparaîtra dans le getcap.
		"description":
			type: string
      required: true
    # Une ressource correspond à une topologie et plusieurs calculs de coûts (qui seront dans les sources).
		"topology":
			type: object
      required: true
			properties:
        # Description de la topologie. Permet de savoir sur quelle topologie se base cette ressource. Cela est utile pour l'utilisateur et l'administrateur.
				"description":
					type: string
          required: true
        # Bbox dans laquelle les requêtes seront autorisées. Cette bbox doit être exprimée dans la projection d'origine des données.
        "bbox":
          type: string
          required: true
        # Projection d'origine des données
        "projection":
          type: string
          required: true
        ## Peut être utile plus tard
        # # Descriptif de la base qui contient la topologie dans PGR. Ce n'est PAS la base source (ex. BDUNI), c'est la base modifiée pour pouvoir faire des calculs d'itinéraires.
				# "base":
				# 	type: object
        #   required: true
				# 	properties:
        #     # Table contenant la topologie des tronçons navigables.
				# 		"table":
				# 			type: string
        #       required: true
        # # Descriptif des colonnes contenant les attributs de chaque tronçon.
        "attributeColumns":
          type: array
          required: false
          minItems: 1
          items:
            # Mot pour interroger les attributs. C'est ce qui va apparaître dans le getcap.
            "key":
              type: string
              required: true
            # Nom de la colonne qui contient l'information. Cette colonne doit être dans la même table.
            "column":
              type: string
              required: true
            # Permet d'indiquer si l'attribut mentionner sera par défaut dans la réponse de l'utilisateur ou pas
            "default":
              type: boolean
              required: true
    # Liste des sources permettants de construire la ressource.
		"sources":
			type: array
      required: true
			minItems: 1
			items:
				type: object
				properties:
          # Id de la source
					"id":
						type: string
            required: true
          # Type de la source
					"type":
						type: string
            required: true
          # Le storage indique ou se trouve le coût, comme c'est du PGR, il indique les colonnes de coût pour chaque tronçon. Ils doivent être dans la même table que la topologie.
					"storage":
						type: object
            required: true
						properties:
              # Colonne de coût en sens direct
							"costColumn":
								type: string
                required: true
              # Colonne de coût en sens inverse
							"reverseCostColumn":
								type: string
                required: true
          # A chaque doublet de colonne de coût correspond un mode de déplacement et une optimisation combinée.
					"cost":
						type: object
            required: true
						properties:
              # Mode de déplacement
							"profile":
								type: string
                required: true
              # Optimisation
							"optimization":
								type: string
                required: true
              # Indique où se trouve le fichier .lua qui a permis de générer les colonnes de coût
							"compute":
								type: object
                required: true
								properties:
									"storage":
										$ref: "#/components/schemas/storage"
                    required: true
                  # Indique ou se trouve le fichier json qui a permis de générer le lua
                  "configuration":
                    type: object
                    required: true
                    properties:
                      # Nom de la propriété qui est utilisé dans le fichier json
                      "name":
                        type: string
                        required: true
                      "storage":
                        $ref: "#/components/schemas/storage"
                        required: true
    # Liste des opérations rendus disponibles
		"availableOperations":
			type: array
      required: true
			minItems: 1
      uniqueItems: true
			items:
        type: object
        properties:
          # Id de l'opération
          "id":
            type: string
          # Tableau des parametres de l'opération
          "parameters":
            type: array
            items:
              type: object
              properties:
                # Id du paramètre
                "id":
                  type: string
                  required: true
                # Valeur par défaut
                "defaultValueContent":
                  type: string
                  required: false
                # Valeurs possibles
                "values":
                  required: false
                  type:
                    oneOf:
                      - array
                      - string
                      - object
components:
  schemas:
    # storage d'un document: fichier ou ceph
  	"storage":
  		type: object
  		properties:
        # Fichier
				"file":
						type: string
            required: false
